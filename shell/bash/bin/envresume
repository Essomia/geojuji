#!/bin/bash

source util-colors.sh
source util-titles.sh

###########
# Env resume
# A helper to get a status for computer dependencies managers.
###########

# USAGE
# --------------------------------

if [ $# -lt 1 ]; then
    echo -e "${YELLOW_UL}Usage:${RESET}";
    echo -e "  $(basename "$0") ${BLUE}<command> [option:brew|ruby|node|composer]${RESET}";
    echo "";
    echo -e "${YELLOW_UL}Commands:${RESET}";
    echo -e "  ${GREEN}check${RESET}     Check paths and current version of installed packages.";
    echo -e "  ${GREEN}outdated${RESET}  Get list of outdated packages.";
    echo -e "  ${GREEN}update${RESET}    Update main packages manager.";
    echo -e "  ${GREEN}upgrade${RESET}   Update global outdated packages.";
    echo -e "  ${GREEN}all${RESET}       ATT: Do all the above in order: outdated -> update -> upgrade -> check";
    exit 1;
fi


# FUNCTIONS
# --------------------------------

function fnComposer() {
    styleSubtitle "Composer";

    if [[ -n $(/usr/bin/which composer) ]]; then
        BIN_COMPOSER=$(/usr/bin/which composer);

        case $1 in
            "check")
                echo -e "${YELLOW}Path:${RESET}    $BIN_COMPOSER";
                echo -e "${YELLOW}Version:${RESET} $($BIN_COMPOSER --version)";
                ;;
            "outdated")
                echo -e "Composer don't have any global packages.";
                ;;
            "update")
                $BIN_COMPOSER self-update;
                ;;
            "upgrade")
                echo -e "Composer don't have any global packages.";
                ;;
            *)
                echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}";
                ;;
        esac
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You don't have \"composer\" installed.${RESET}";
    fi
}

function fnNodejs() {
    styleSubtitle "Node JS";

    if [[ -n $(/usr/bin/which npm) && -n $(/usr/bin/which node) ]]; then
        BIN_NPM=$(/usr/bin/which npm);
        BIN_NODE=$(/usr/bin/which node);

        case $1 in
            "check")
                echo -e "${YELLOW}Path:${RESET}    $BIN_NODE";
                echo -e "${YELLOW}Version:${RESET} $($BIN_NODE --version)";
                echo -e "${YELLOW}Path:${RESET}    $BIN_NPM";
                echo -e "${YELLOW}Version:${RESET} $($BIN_NPM --version)";
                echo -e "";
                echo -e "${YELLOW}Packages installed:${RESET}";
                $BIN_NPM list -g --depth=0;
                ;;
            "outdated")
                $BIN_NPM outdated -g;
                ;;
            "update")
                $BIN_NPM update -g npm;
                ;;
            "upgrade")
                $BIN_NPM update -g;
                ;;
            *)
                echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}";
                ;;
        esac
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You don't have \"node\" or \"npm\" installed.${RESET}";
    fi
}

function fnRuby() {
    styleSubtitle "Ruby";

    if [[ -n $(/usr/bin/which ruby) && -n $(/usr/bin/which gem) ]]; then
        BIN_RUBY=$(/usr/bin/which ruby);
        BIN_GEM=$(/usr/bin/which gem);

        case $1 in
            "check")
                echo -e "${YELLOW}Path:${RESET}    $BIN_RUBY";
                echo -e "${YELLOW}Version:${RESET} $($BIN_RUBY --version)";
                echo -e "${YELLOW}Path:${RESET}    $BIN_GEM";
                echo -e "${YELLOW}Version:${RESET} $($BIN_GEM --version)";
                echo -e "";
                echo -e "${YELLOW}Packages installed:${RESET}";
                $BIN_GEM list --local;
                ;;
            "outdated")
                $BIN_GEM outdated;
                ;;
            "update")
                $BIN_GEM update --system;
                ;;
            "upgrade")
                $BIN_GEM update;
                $BIN_GEM cleanup;
                ;;
            *)
                echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}";
                ;;
        esac
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You don't have \"ruby\" or \"gem\" installed.${RESET}";
    fi
}

function fnBrew() {
    styleSubtitle "Brew";

    if [[ -n $(/usr/bin/which brew) ]]; then
        BIN_BREW=$(/usr/bin/which brew);

        case $1 in
            "check")
                echo -e "${YELLOW}Path:${RESET}    $BIN_BREW";
                echo -e "${YELLOW}Version:${RESET} $($BIN_BREW --version)";
                echo -e "";
                echo -e "${YELLOW}Packages installed:${RESET}";
                $BIN_BREW ls --versions;
                ;;
            "outdated")
                $BIN_BREW outdated;
                ;;
            "update")
                $BIN_BREW update;
                ;;
            "upgrade")
                $BIN_BREW upgrade -v;
                $BIN_BREW cleanup -s;
                ;;
            *)
                echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}";
                ;;
        esac
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You don't have \"brew\" installed.${RESET}";
    fi
}


# SWITCHER
# --------------------------------

if [ -n "$1" ]; then
    styleTitle "Environment $1";

    case $1 in
        "check"|"outdated"|"update"|"upgrade")
            case $2 in
                "brew")
                    fnBrew $1;
                    ;;
                "ruby")
                    fnRuby $1;
                    ;;
                "node")
                    fnNodejs $1;
                    ;;
                "composer")
                    fnComposer $1;
                    ;;
                *)
                    fnBrew $1;
                    fnRuby $1;
                    fnNodejs $1;
                    fnComposer $1;
                    ;;
            esac
            ;;
        "all")
            case $2 in
                "brew")
                    fnBrew 'outdated';
                    fnBrew 'update';
                    fnBrew 'upgrade';
                    fnBrew 'check';
                    ;;
                "ruby")
                    fnRuby 'outdated';
                    fnRuby 'update';
                    fnRuby 'upgrade';
                    fnRuby 'check';
                    ;;
                "node")
                    fnNodejs 'outdated';
                    fnNodejs 'update';
                    fnNodejs 'upgrade';
                    fnNodejs 'check';
                    ;;
                "composer")
                    fnComposer 'outdated';
                    fnComposer 'update';
                    fnComposer 'upgrade';
                    fnComposer 'check';
                    ;;
                *)
                    echo -e "${RED_UL}ERROR:${RESET} ${RED}Can't do all all.${RESET}"
                    ;;
            esac
            ;;
        *)
            echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}"
            ;;
    esac
else
    echo -e "${RED_UL}ERROR:${RESET} ${RED}You need to give a valid command.${RESET}";
fi
