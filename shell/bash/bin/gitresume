#!/bin/bash

source util-colors.sh

###########
# GIT RESUME
# A helper to get a status for git repository in a folder.
###########

# USAGE
# --------------------------------

if [ $# -lt 1 ]; then
    echo -e "${YELLOW_UL}Usage:${RESET}";
    echo -e "  $(basename "$0") ${BLUE}<folder> <max-depth[1]>${RESET}";
    exit 1;
fi


# FUNCTIONS
# --------------------------------

function resume_title() {
    echo -e "${YELLOW_BG}In: $1 $(printf "%-$((50 - ${#1}))s" " ")${RESET}";
}

function resume_subtitle() {
    echo -e "${YELLOW_UL}$1:${RESET}";
}


function resume_fn_remotes() {
    if [[ -n $(/usr/bin/git remote -vv) ]]; then
        echo -e "${GREEN_UL}Ok:${RESET} You have configured a remote for this repository.";
        echo "";

        /usr/bin/git remote -vv;
    else
        echo -e "${RED_UL}ERROR:${RESET}${RED} No remote was specified for this repository.${RESET}";
    fi
}

function resume_fn_branches() {
    if [[ -n $(/usr/bin/git branch -vv) ]]; then
        echo -e "${GREEN_UL}Ok:${RESET} You use branches for development.";
        echo "";

        /usr/bin/git branch -vv --no-color;
    else
        echo -e "${RED_UL}ERROR:${RESET}${RED} You have no branches to use for development.${RESET}";
    fi
}

function resume_fn_status() {
    if [[ -n $(/usr/bin/git status -s) ]]; then
        echo -e "${RED_UL}ERROR:${RESET}${RED} You have some change to commit.${RESET}";
        echo "";

        /usr/bin/git status -s;
    else
        echo -e "${GREEN_UL}Ok:${RESET} No changes to commit.";
    fi
}

function resume_fn_pulling() {
    if [[ -n $(/usr/bin/git remote -vv) ]]; then
        if [[ -z $(/usr/bin/git status -s) ]]; then
            echo -e "${GREEN_UL}Ok:${RESET} Your local repository is now updated!";
            echo "";

            /usr/bin/git pull -pv;
        else
            echo -e "${RED_UL}ERROR:${RESET}${RED} You have some change to commit (before pulling).${RESET}";
        fi
    else
        echo -e "${RED_UL}ERROR:${RESET}${RED} No remote was specified for this repository.${RESET}";
    fi
}


# GIT RESUME
# --------------------------------

if [ -d "$1" ]; then
    # Define folders (current and where to look)
    FOLDER_ROOT=$(pwd);
    ARGS_FOLDER=$1;

    # Define max depth
    if [[ -z $2 ]]; then
        ARGS_MAXDEPTH=1;
    else
        ARGS_MAXDEPTH=$2;
    fi

    # Display runing header
    echo -e "${BLUE_UL}Running function:${RESET}";
    echo -e "${BLUE}- from:${RESET} ${FOLDER_ROOT}";
    echo -e "${BLUE}- to:${RESET} ${ARGS_FOLDER}";
    echo -e "${BLUE}- maxdepth:${RESET} ${ARGS_MAXDEPTH}";

    # Loop in all git repository found with given arguments
    find $ARGS_FOLDER -type d -maxdepth $ARGS_MAXDEPTH -name ".git" | while read DIR; do
        cd $FOLDER_ROOT/${DIR%.git};

        echo "";
        resume_title ${DIR%.git};

        echo "";
        resume_subtitle "Remotes";
        resume_fn_remotes;

        echo "";
        resume_subtitle "Pull";
        resume_fn_pulling;

        echo "";
        resume_subtitle "Branches";
        resume_fn_branches;

        echo "";
        resume_subtitle "Status";
        resume_fn_status;

        cd $FOLDER_ROOT;
    done
else
    echo -e "${RED_UL}ERROR:${RESET}${RED} '$1' is not a folder.${RESET}";
fi
