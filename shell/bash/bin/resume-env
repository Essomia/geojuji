#!/bin/bash

source util-colors.sh
source util-titles.sh

###########
# Resume Env
# A helper to get a status for computer dependencies managers.
###########

# USAGE
# --------------------------------

if [ $# -lt 1 ]; then
    echo -e "${YELLOW_UL}Usage:${RESET}";
    echo -e "  $(basename "$0") ${BLUE}<command> <package>${RESET}";
    echo "";
    echo -e "${YELLOW_UL}Commands:${RESET}";
    echo -e "  ${GREEN}doctor${RESET}    Check paths and current version of installed packages.";
    echo -e "  ${GREEN}outdated${RESET}  Get list of outdated packages.";
    echo -e "  ${GREEN}update${RESET}    Update main packages manager.";
    echo -e "  ${GREEN}upgrade${RESET}   Update global outdated packages.";
    echo "";
    echo -e "${YELLOW_UL}Packages:${RESET}";
    echo -e "  ${GREEN}-${RESET}         [!] If none, all will be done: brew -> ruby -> node -> composer";
    echo -e "  ${GREEN}brew${RESET}      Homebrew";
    echo -e "  ${GREEN}node${RESET}      NodeJS";
    echo -e "  ${GREEN}ruby${RESET}      Ruby";
    exit 1;
fi


# FUNCTIONS
# --------------------------------

function fnNodejs() {
    if [ "$2" == "print" ] && [ "$1" == "doctor" ]; then
        echo -e "";
        echo "## NodeJS"
        echo -e "";

        YELLOW='\n**';
        RESET='**\n';
        CODE='```';
    else
        styleSubtitle "NodeJS {$1}";
    fi

    if [[ -n $(/usr/bin/which npm) && -n $(/usr/bin/which node) ]]; then
        BIN_NPM=$(/usr/bin/which npm);
        BIN_NODE=$(/usr/bin/which node);

        case $1 in
            "doctor")
                echo -e "${YELLOW}Path:${RESET}    $BIN_NODE";
                echo -e "${YELLOW}Version:${RESET} $($BIN_NODE --version)";
                echo -e "${YELLOW}Path:${RESET}    $BIN_NPM";
                echo -e "${YELLOW}Version:${RESET} $($BIN_NPM --version)";
                echo -e "";
                echo -e "${YELLOW}Packages installed:${RESET}";

                echo -e $CODE;
                $BIN_NPM list -g --depth=0;
                echo -e $CODE;
                ;;
            "outdated")
                $BIN_NPM outdated -g;
                ;;
            "update")
                $BIN_NPM update -g npm;
                ;;
            "upgrade")
                $BIN_NPM update -g;
                ;;
            *)
                echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}";
                ;;
        esac
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You don't have \"node\" or \"npm\" installed.${RESET}";
    fi
}

function fnRuby() {
    if [ "$2" == "print" ] && [ "$1" == "doctor" ]; then
        echo -e "";
        echo "## Ruby"
        echo -e "";

        YELLOW='\n**';
        RESET='**\n';
        CODE='```';
    else
        styleSubtitle "Ruby {$1}";
    fi

    if [[ -n $(/usr/bin/which ruby) && -n $(/usr/bin/which gem) ]]; then
        BIN_RUBY=$(/usr/bin/which ruby);
        BIN_GEM=$(/usr/bin/which gem);

        case $1 in
            "doctor")
                echo -e "${YELLOW}Path:${RESET}    $BIN_RUBY";
                echo -e "${YELLOW}Version:${RESET} $($BIN_RUBY --version)";
                echo -e "${YELLOW}Path:${RESET}    $BIN_GEM";
                echo -e "${YELLOW}Version:${RESET} $($BIN_GEM --version)";
                echo -e "";
                echo -e "${YELLOW}Packages installed:${RESET}";

                echo -e $CODE;
                $BIN_GEM list --local;
                echo -e $CODE;
                ;;
            "outdated")
                echo -e "${PINK_UL}Note:${RESET} Main ruby package is used.";
                # $BIN_GEM outdated;
                ;;
            "update")
                echo -e "${PINK_UL}Note:${RESET} Main ruby package is used.";
                # $BIN_GEM update --system;
                ;;
            "upgrade")
                echo -e "${PINK_UL}Note:${RESET} Main ruby package is used.";
                # $BIN_GEM update;
                # $BIN_GEM cleanup;
                ;;
            *)
                echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}";
                ;;
        esac
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You don't have \"ruby\" or \"gem\" installed.${RESET}";
    fi
}

function fnBrew() {
    if [ "$2" == "print" ] && [ "$1" == "doctor" ]; then
        echo -e "";
        echo "## Brew"
        echo -e "";

        YELLOW='\n**';
        RESET='**\n';
        CODE='```';
    else
        styleSubtitle "Brew {$1}";
    fi

    if [[ -n $(/usr/bin/which brew) ]]; then
        BIN_BREW=$(/usr/bin/which brew);

        case $1 in
            "doctor")
                echo -e "${YELLOW}Path:${RESET}    $BIN_BREW";
                echo -e "${YELLOW}Version:${RESET} $($BIN_BREW --version)";
                echo -e "";
                echo -e "${YELLOW}Packages installed:${RESET}";

                echo -e $CODE;
                $BIN_BREW ls --versions $(brew leaves);
                echo -e $CODE;

                echo -e "";
                echo -e "${YELLOW}Packages cask installed:${RESET}";

                echo -e $CODE;
                $BIN_BREW list --cask --versions;
                echo -e $CODE;

                echo -e "";
                echo -e "${YELLOW}Packages pinned:${RESET}";

                echo -e $CODE;
                $BIN_BREW list --pinned;
                echo -e $CODE;
                ;;
            "outdated")
                $BIN_BREW outdated;
                ;;
            "update")
                $BIN_BREW update --verbose;
                ;;
            "upgrade")
                $BIN_BREW upgrade --verbose;
                $BIN_BREW cleanup -s --verbose;
                ;;
            *)
                echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}";
                ;;
        esac
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You don't have \"brew\" installed.${RESET}";
    fi
}


# SWITCHER
# --------------------------------

case $1 in
    "doctor"|"outdated"|"update"|"upgrade")
        if [ "$3" == "print" ] && [ "$1" == "doctor" ]; then
            echo "# Environment Resume"
            echo -e "";
            echo -e "**Date of latest checkup:** $(date '+%Y-%m-%d')";
            echo -e "";
        else
            styleTitle "Environment Resume";
        fi

        case $2 in
            "brew")
                fnBrew $1 $3;
                ;;
            "ruby")
                fnRuby $1 $3;
                ;;
            "node")
                fnNodejs $1 $3;
                ;;
            *)
                fnBrew $1 $3;
                fnRuby $1 $3;
                fnNodejs $1 $3;
                ;;
        esac
        ;;
    *)
        echo -e "${RED_UL}ERROR:${RESET} ${RED}\"$1\" is not a valid command.${RESET}"
        ;;
esac
