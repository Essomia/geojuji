#!/bin/bash

source util-colors.sh
source util-titles.sh

###########
# Git resume
# A helper to get a status for git repository in a folder.
###########

# USAGE
# --------------------------------

if [ $# -lt 1 ]; then
    echo -e "${YELLOW_UL}Usage:${RESET}";
    echo -e "  $(basename "$0") ${BLUE}<folder> <max-depth[1]>${RESET}";
    echo "";
    echo -e "${YELLOW_UL}Examples:${RESET}";
    echo -e "  $(basename "$0") ${PINK}sub-folder${RESET}";
    echo -e "  $(basename "$0") ${PINK}../parent-folder 2${RESET}";
    exit 1;
fi


# FUNCTIONS
# --------------------------------

BIN_GIT=$(/usr/bin/which git);

function fnRemotes() {
    styleSubtitle "Remotes";

    if [[ -n $($BIN_GIT remote -vv) ]]; then
        $BIN_GIT remote -vv;
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}No remote was specified for this repository.${RESET}";
    fi
}

function fnBranches() {
    styleSubtitle "Branches";

    if [[ -n $($BIN_GIT branch -vv) ]]; then
        $BIN_GIT branch -vv;
    else
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You have no local branches used for development.${RESET}";
    fi
}

function fnStatus() {
    styleSubtitle "Status";

    if [[ -n $($BIN_GIT status -s) ]]; then
        echo -e "${RED_UL}ERROR:${RESET} ${RED}You have some change to commit.${RESET}";
        echo "";

        $BIN_GIT status -s;
    else
        echo -e "No changes to commit.";
    fi
}

function fnFetching() {
    styleSubtitle "Fetching branches";

    if [[ -n $($BIN_GIT remote -vv) ]]; then
        $BIN_GIT fetch -pv;
    fi
}


# SWITCHER
# --------------------------------

if [ -d "$1" ]; then
    # actual absolute folder
    FOLDER_ROOT=$(pwd);
    # relative path to explore
    ARGS_FOLDER=${1%/};
    # max depth sub-folder to check
    ARGS_MAXDEPTH=$([[ -z $2 ]] && echo '1' || echo $2);

    # Loop in all git repository found with given arguments
    find -s $ARGS_FOLDER -type d -maxdepth $ARGS_MAXDEPTH -name ".git" | while read DIR; do
        cd $FOLDER_ROOT/${DIR%.git};

        styleTitle ${DIR%.git};

        fnRemotes;
        fnFetching;
        fnBranches;
        fnStatus;
    done

    cd $FOLDER_ROOT;
else
    echo -e "${RED_UL}ERROR:${RESET} ${RED}'$1' is not a folder.${RESET}";
fi
