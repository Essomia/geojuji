#!/bin/bash

source util-colors.sh
source util-titles.sh

###########
# GitApply
# A helper to manage git repositories.
###########

# USAGE
# --------------------------------

if [ $# -lt 1 ]; then
    echo -e "${YELLOW_UL}Usage:${RESET}";
    echo -e "  $(basename "$0") ${GREEN}<folder> <max-depth> \"<command>\"${RESET}";
    echo "";
    echo -e "${YELLOW_UL}Commands:${RESET}";
    echo -e "  ${GREEN}folder${RESET}     Parent folder to explore.";
    echo -e "  ${GREEN}max-depth${RESET}  Max depth of sub-folder to explore (we will look for .git folders).";
    echo -e "  ${GREEN}command${RESET}    Command to execute in each git repository.";
    echo "";
    echo -e "${YELLOW_UL}Examples:${RESET}";
    echo -e "  $(basename "$0") ${GREEN}sub-folder/ 2 \"git status\"${RESET}";
    echo -e "  $(basename "$0") ${GREEN}../folder/ 2 \"git fetch\"${RESET}";
    exit 1;
fi


# UTILS
# --------------------------------

BIN_GIT=$(/usr/bin/which git);

function fnBasic() {
    if [[ -n $($BIN_GIT status -s) ]]; then
        styleError "You have some change to commit.";

        $BIN_GIT status -s;
    else
        echo -e "No changes to commit.";
    fi
}


# FUNCTIONS
# --------------------------------

function fnApply() {
    # actual absolute folder
    FOLDER_ROOT=$(pwd);
    # relative path to explore
    ARGS_FOLDER=${1%/};
    # max depth sub-folder to check
    ARGS_MAXDEPTH=$([[ -z $2 ]] && echo '1' || echo $2);
    # args command to execute
    ARGS_CMDTOEXD="${@:3}"

    # Loop in all git repositories found with given arguments
    find -s $ARGS_FOLDER -type d -maxdepth $ARGS_MAXDEPTH -name ".git" | while read DIR; do
        cd $FOLDER_ROOT/${DIR%.git};

        styleSubtitle ${DIR%.git};

        # If $ARGS_CMDTOEXD is empty
        if [[ -z $ARGS_CMDTOEXD ]]; then
            fnBasic;
        else
            eval $ARGS_CMDTOEXD;
        fi
    done

    cd $FOLDER_ROOT;
}


# SWITCHER
# --------------------------------

if [ -d "$1" ]; then
    styleTitle "GitApply";

    fnApply "${@:1}"
else
    styleError "\"$1\" is not a folder.";
fi
